
``` Python
class Transicion:
    # Clase que representa una transición en la máquina de Turing.
    def __init__(self, estado_siguiente, simbolo_escrito, movimiento):
        # Inicializa una transición con el estado siguiente, el símbolo a escribir y el movimiento.
        self.estado_siguiente = estado_siguiente
        self.simbolo_escrito = simbolo_escrito
        self.movimiento = movimiento  # -1 para izquierda, 1 para derecha, 0 para no moverse

class MaquinaTuring:
    # Clase que representa una máquina de Turing.
    def __init__(self):
        # Inicializa una máquina de Turing con una cinta vacía, cabezal en la posición 0 y estado 'INICIO'.
        self.cinta = []
        self.cabezal = 0
        self.estado = 'INICIO'

    def mover_derecha(self):
        # Mueve el cabezal a la derecha. Si el cabezal está al final de la cinta, añade un espacio adicional.
        self.cabezal += 1
        if self.cabezal == len(self.cinta):
            self.cinta.append('0')

    def mover_izquierda(self):
        # Mueve el cabezal a la izquierda si no está en la posición 0.
        if self.cabezal > 0:
            self.cabezal -= 1

    def leer(self):
        # Lee el símbolo actual en la posición del cabezal.
        return self.cinta[self.cabezal]

    def escribir(self, simbolo):
        # Escribe un símbolo en la posición actual del cabezal.
        self.cinta[self.cabezal] = simbolo

    def sumar(self):
        # Suma los números representados en la cinta. Se asume que los números están en formato de dígitos individuales.
        self.cinta = list(self.cinta.replace(' ', ''))  # Elimina espacios en la cinta
        self.cabezal = len(self.cinta) - 1
        acarreo = 0

        while self.cabezal >= 0:
            if self.leer() == '+':
                if acarreo > 0:
                    self.escribir(str(acarreo))  # Escribe el acarreo si existe
                break

            digito = int(self.leer()) if self.leer().isdigit() else 0
            suma = digito + acarreo
            self.escribir(str(suma % 10))  # Escribe el dígito de la suma
            acarreo = suma // 10  # Calcula el acarreo
            self.mover_izquierda()  # Mueve el cabezal a la izquierda

        if acarreo > 0:
            self.cinta.insert(0, str(acarreo))  # Inserta el acarreo al inicio si existe

        resultado = ''.join(self.cinta).replace('+', '')  # Une los dígitos y elimina el símbolo '+'
        return int(resultado)  # Convierte el resultado a un entero

    def restar(self):
        # Resta los números representados en la cinta. Se asume que los números están en formato de dígitos individuales.
        self.cinta = list(self.cinta.replace(' ', ''))  # Elimina espacios en la cinta
        self.cabezal = len(self.cinta) - 1
        prestamo = 0

        while self.cabezal >= 0:
            if self.leer() == '-':
                if prestamo > 0:
                    self.escribir(str(prestamo))  # Escribe el préstamo si existe
                break

            digito = int(self.leer()) if self.leer().isdigit() else 0
            if digito < prestamo:
                digito += 10
                prestamo = 1  # Ajusta el préstamo
            else:
                prestamo = 0
            resta = digito - prestamo
            self.escribir(str(resta % 10))  # Escribe el dígito de la resta
            prestamo = resta // 10  # Calcula el préstamo
            self.mover_izquierda()  # Mueve el cabezal a la izquierda

        resultado = ''.join(self.cinta).replace('-', '')  # Une los dígitos y elimina el símbolo '-'
        return int(resultado)  # Convierte el resultado a un entero

def ejecutar_suma(expresion):
    # Ejecuta la operación de suma con la expresión dada.
    mt = MaquinaTuring()  # Crea una instancia de la máquina de Turing
    mt.cinta = expresion  # Asigna la expresión a la cinta

    print(f"Cinta inicial: {mt.cinta}")  # Muestra la cinta inicial
    resultado = mt.sumar()  # Realiza la suma
    print(f"Cinta final: {''.join(mt.cinta)}")  # Muestra la cinta final
    print(f"Resultado: {resultado}")  # Muestra el resultado

    # Verifica el resultado
    num1, num2 = map(int, expresion.split('+'))  # Separa los números y los convierte a enteros
    print(f"Verificación: {num1} + {num2} = {num1 + num2}")  # Muestra la verificación de la suma

def ejecutar_resta(expresion):
    # Ejecuta la operación de resta con la expresión dada.
    mt = MaquinaTuring()  # Crea una instancia de la máquina de Turing
    mt.cinta = expresion  # Asigna la expresión a la cinta

    print(f"Cinta inicial: {mt.cinta}")  # Muestra la cinta inicial
    resultado = mt.restar()  # Realiza la resta
    print(f"Cinta final: {''.join(mt.cinta)}")  # Muestra la cinta final
    print(f"Resultado: {resultado}")  # Muestra el resultado

    # Verifica el resultado
    num1, num2 = map(int, expresion.split('-'))  # Separa los números y los convierte a enteros
    print(f"Verificación: {num1} - {num2} = {num1 - num2}")  # Muestra la verificación de la resta

if __name__ == "__main__":
    # Bloque principal que ejecuta la máquina de Turing dependiendo de la operación seleccionada por el usuario.
    operacion = input("Seleccione la operación (sumar o restar): ")  # Solicita la operación al usuario
    if operacion == "sumar":
        expresion = input("Ingrese la suma (por ejemplo, 12+2): ")  # Solicita la expresión de suma
        ejecutar_suma(expresion)  # Llama a la función para ejecutar la suma
    elif operacion == "restar":
        expresion = input("Ingrese la resta (por ejemplo, 12-2): ")  # Solicita la expresión de resta
        ejecutar_resta(expresion)  # Llama a la función para ejecutar la resta
    else:
        print("Operación no válida.")  # Mensaje si la operación no es válida
```
